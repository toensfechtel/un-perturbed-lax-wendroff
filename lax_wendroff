function [ phi ] = un_perturbed_lax_wendroff(m)
%Discrete solution of kink soliton

     % Put all plots on the same graph (comment out if desired)
 
ax = -40;
bx = 40;             % heat conduction coefficient:
               % final time
               c = 0.5; % velocity of the solitary wave
 
h = (bx-ax)/(m+1);         % h = delta x
x = linspace(ax,bx,m+2);  % note x(1)=0 and x(m+2)=1
t = linspace(ax,bx,m+2);
Tfinal = 5;                       % u(1)=g0 and u(m+2)=g1 are known from BC's
k=(1/25)*h;% time step equals space delta(x) *****MUST CHANGE TO ACCOUNT SECOND ORDER 
Tsteps = (Tfinal / k) 

utrue = @(y,t) 4*atan(exp(((y-c*t)/sqrt(1-(c^2)))));

%INITIAL CONDITIONS WHICH PERTAIN TO THE EXACT SOLITON SOLUTION ABOVE
% NOTING THAT T_0 = 0 , INITIAL TIME
unot = @(y)4*atan(exp(y/sqrt(1-(c^2))));
d_dx_unot = @(y)(4*c*exp(y/sqrt( 1-(c^2) )))/(( sqrt( 1-( c^2 ) ))*(1+exp(2*(y/sqrt(1-(c^2)))))); % d/dx(u(x,0))

%BOUNDRY CONDITIONS DERIVED FROM THE GIVEN SOLITON SOLUTION
%ub_one = utrue(ax); % boundry condition u(a,t)
%ub_two = utrue(bx); % boundry condition u(b,t)

%%% WE BEGIN WITH Lax?Friedrichs METHOD TO GAIN 2 TIME LEVELS, SO THAT WE MAY 
%%% INITIALIZE OUR 2 LEVEL SCHEME


initTwoLevel = false;
Tgrunt = 0;%% => time steps that the function has gone through
prevApprox = [];
uApprox = [];
bigM = [];
dimCount = 1;
for i=1:Tsteps
    tgrunt = Tgrunt + k;
    if(~initTwoLevel)
       %%$ NEED SECOND ORDER LAX - WENDROFF
       %%% => Lax?Friedrichs for Tn, where n = 0
       %%% begins at j = 2, the jth dpends on j-1, j, j+1 of the previous
       %%% time level, thus this is a for loop for inner points with logic
       %%% if else conditions to satisfy boundry point, which are not
       %%% generated by the Lax?Friedrichs schemez
        for j=2:length(x)-1
            %nth step, slice of the surface pertatining time = 1, based on initial conditions
            %based on prvious time step solutions
            % based on u0
            % x_j = x_1
           if(j==2) 
            uApprox(end+1) = utrue(ax,tgrunt); %using boundry condition to complete next time level, it being n = 1
           end
            uApprox(end+1) =  unot(x(j)) - (k/2*h)*( unot(x(j+1)) - unot(x(j-1)) )  + (k^2/2*h^2)*( unot(x(j+1)) - 2*unot(x(j)) + unot(x(j-1)) ) - (k)*sin( unot(x(j)) ); %using initial condition to gain iner points of next time level it being n = 1
           if(j==length(x)-1)
            uApprox(end+1) = utrue(bx,tgrunt); %using boundry condition to complete next time level, it being n = 1
           end
        end
        prevApprox = unot(x);
       bigM(dimCount,:) =  unot(x);
       dimCount = dimCount+1;
        initTwoLevel = true;
    else 
       %%% => TWO LEVEL SCHEME AFTER T0 HAS BEEN DEFINED
       if(initTwoLevel)
           

           %WE NOW USE OUR TWO LEVEL SCEME BASED ON THE PREVIOUS TWO LEVELS
           %WE HAVE THAT THE FIRST TIME THIS SCHEME RUNS, IT USES THE FIRST
           %LEVEL GENERATED BY THE Lax?Friedrichs AND THE INITIAL CONDITION
           %GIVEN
           
           %SET 
           approxGrunt = [];
           for j=2:length(x)-1
            if(j==2)
                approxGrunt(end+1) = utrue(ax,tgrunt); %using boundry condition to complete next time level, it being n = 1
            end
                approxGrunt(end+1) = 2*uApprox(j) - prevApprox(j) + ((k^2)/(h^2))*(uApprox(j-1) - 2*uApprox(j) + uApprox(j+1)) - (k^2)*sin(uApprox(j));
            
             if(j==length(x)-1)
                  approxGrunt(end+1) = utrue(bx,tgrunt);
             end
             
           end
           
           %UPDATE PREVIOUS TIME LEVELS
           % N BECOMES N-1 AND
           % approxgrunt BECOMES uApprox
           prevApprox = uApprox;
           uApprox = approxGrunt;
       end
    end
   
    
    % GRAPHING RESULTS, BELOW WE GRAPH KINK SOLUTION AND OUR APPROXIMATION
    % WE GRAPH SLICES OF THE ACTUAL SURFACE IN 3D SPACE IN THIS CASE A KINK
    % WAVE CORESPONDING TO A TIME T>=0, WE CURRENTLY AVOID GRAPHING THE
    % KINKS INITIAL CONDITION THUS GRAVE T>=1
    tCons(1:1,1:length(x)) = tgrunt;
    hold on;
    %%%%plot(x,uApprox,'b.-', x,utrue(x,tCons),'r');

    %stem3(x,t,uApprox, '*');

  
        bigM(dimCount,:) = uApprox;
        dimCount = dimCount+1;


       error = max(abs(uApprox-utrue(x,tCons)));
       disp(sprintf('at time t = %9.5e  max error =  %9.5e',tCons(1),error))
    Tgrunt = tgrunt;

end



[X,Y] = meshgrid(ax:h:bx,0:k:Tfinal);
figure
mesh(X,Y, bigM);
%h = surfc(X,Y,bigM, gradient(bigM))
%set(h,'edgecolor','none');
%colorbar


%GRAPHS SOLUTION
%hold on;
%Z = 4*atan(exp(((X-c.*Y)/sqrt(1-(c^2)) )));
%h = surfc(X,Y,Z)
%set(h,'edgecolor','none');
phi = true;
end

